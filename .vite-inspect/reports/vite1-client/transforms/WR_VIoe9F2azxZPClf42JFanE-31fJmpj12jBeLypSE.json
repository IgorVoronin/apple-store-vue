{
  "resolvedId": "C:/Users/iyvor/OneDrive/Документы/Шарага/4_семестр/Фреймворки JS/FW-JS/src/features/ProductFilters/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { combine, createStore } from 'effector';\n\nimport { atom } from '@/shared/factories';\n\nimport { type Product, ProductModel } from '@/entities/Product';\n\nexport const ProductFiltersModel = atom(() => {\n    const $sortBy = createStore<{\n        code: string;\n        name: string;\n    }>({} as { code: string; name: string });\n\n    const $paginatedProducts = combine(\n        {\n            products: ProductModel.$availableProducts,\n            sort: $sortBy,\n            processors: ProductModel.$selectedProcessors,\n            diagonals: ProductModel.$selectedDiagonals,\n            categories: ProductModel.$selectedCategories,\n        },\n        ({ products, sort, processors, diagonals, categories }) => {\n            const currentProducts = [...products].filter((product) => {\n                const currentProcessor =\n                    product.characteristics.find((char) => char.characteristic === 'Процессор')?.value ?? '';\n\n                const currentDiagonals =\n                    product.characteristics.find((char) => char.characteristic === 'Диагональ')?.value ?? '';\n\n                // Проверяем соответствие фильтрам\n                const matchesProcessor = processors.length === 0 || processors.includes(currentProcessor);\n                const matchesDiagonal = diagonals.length === 0 || diagonals.includes(currentDiagonals);\n                const matchesCategory = categories.length === 0 || categories.includes(product.category);\n\n                return matchesProcessor && matchesDiagonal && matchesCategory;\n            });\n\n            switch (sort.code) {\n                case 'rating':\n                    currentProducts.sort((a, b) => (a.rating > b.rating ? 1 : -1));\n                    break;\n                case 'data':\n                    currentProducts.sort((a, b) => (a.createdAt > b.createdAt ? 1 : -1));\n                    break;\n                case 'price':\n                    currentProducts.sort((a, b) => (a.price > b.price ? 1 : -1));\n                    break;\n                default:\n                    break;\n            }\n\n            const size = 9;\n            const subarray: Product[][] = [];\n            for (let i = 0; i < Math.ceil(currentProducts.length / size); i++) {\n                subarray[i] = currentProducts.slice(i * size, i * size + size);\n            }\n\n            return subarray;\n        }\n    );\n\n    const $totalFilteredProducts = $paginatedProducts.map((el) => el.flat(Infinity).length);\n\n    return {\n        $sortBy,\n        $paginatedProducts,\n        $totalFilteredProducts,\n    };\n});\n",
      "start": 1761073703353,
      "end": 1761073703443,
      "sourcemaps": null
    },
    {
      "name": "@tailwindcss/vite:generate:build",
      "start": 1761073703443,
      "end": 1761073703443,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { combine, createStore } from \"effector\";\nimport { atom } from \"@/shared/factories\";\nimport { ProductModel } from \"@/entities/Product\";\nexport const ProductFiltersModel = atom(() => {\n  const $sortBy = createStore({});\n  const $paginatedProducts = combine(\n    {\n      products: ProductModel.$availableProducts,\n      sort: $sortBy,\n      processors: ProductModel.$selectedProcessors,\n      diagonals: ProductModel.$selectedDiagonals,\n      categories: ProductModel.$selectedCategories\n    },\n    ({ products, sort, processors, diagonals, categories }) => {\n      const currentProducts = [...products].filter((product) => {\n        const currentProcessor = product.characteristics.find((char) => char.characteristic === \"Процессор\")?.value ?? \"\";\n        const currentDiagonals = product.characteristics.find((char) => char.characteristic === \"Диагональ\")?.value ?? \"\";\n        const matchesProcessor = processors.length === 0 || processors.includes(currentProcessor);\n        const matchesDiagonal = diagonals.length === 0 || diagonals.includes(currentDiagonals);\n        const matchesCategory = categories.length === 0 || categories.includes(product.category);\n        return matchesProcessor && matchesDiagonal && matchesCategory;\n      });\n      switch (sort.code) {\n        case \"rating\":\n          currentProducts.sort((a, b) => a.rating > b.rating ? 1 : -1);\n          break;\n        case \"data\":\n          currentProducts.sort((a, b) => a.createdAt > b.createdAt ? 1 : -1);\n          break;\n        case \"price\":\n          currentProducts.sort((a, b) => a.price > b.price ? 1 : -1);\n          break;\n        default:\n          break;\n      }\n      const size = 9;\n      const subarray = [];\n      for (let i = 0; i < Math.ceil(currentProducts.length / size); i++) {\n        subarray[i] = currentProducts.slice(i * size, i * size + size);\n      }\n      return subarray;\n    }\n  );\n  const $totalFilteredProducts = $paginatedProducts.map((el) => el.flat(Infinity).length);\n  return {\n    $sortBy,\n    $paginatedProducts,\n    $totalFilteredProducts\n  };\n});\n",
      "start": 1761073703443,
      "end": 1761073703469,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/iyvor/OneDrive/Документы/Шарага/4_семестр/Фреймворки JS/FW-JS/src/features/ProductFilters/model/index.ts"
        ],
        "sourcesContent": [
          "import { combine, createStore } from 'effector';\n\nimport { atom } from '@/shared/factories';\n\nimport { type Product, ProductModel } from '@/entities/Product';\n\nexport const ProductFiltersModel = atom(() => {\n    const $sortBy = createStore<{\n        code: string;\n        name: string;\n    }>({} as { code: string; name: string });\n\n    const $paginatedProducts = combine(\n        {\n            products: ProductModel.$availableProducts,\n            sort: $sortBy,\n            processors: ProductModel.$selectedProcessors,\n            diagonals: ProductModel.$selectedDiagonals,\n            categories: ProductModel.$selectedCategories,\n        },\n        ({ products, sort, processors, diagonals, categories }) => {\n            const currentProducts = [...products].filter((product) => {\n                const currentProcessor =\n                    product.characteristics.find((char) => char.characteristic === 'Процессор')?.value ?? '';\n\n                const currentDiagonals =\n                    product.characteristics.find((char) => char.characteristic === 'Диагональ')?.value ?? '';\n\n                // Проверяем соответствие фильтрам\n                const matchesProcessor = processors.length === 0 || processors.includes(currentProcessor);\n                const matchesDiagonal = diagonals.length === 0 || diagonals.includes(currentDiagonals);\n                const matchesCategory = categories.length === 0 || categories.includes(product.category);\n\n                return matchesProcessor && matchesDiagonal && matchesCategory;\n            });\n\n            switch (sort.code) {\n                case 'rating':\n                    currentProducts.sort((a, b) => (a.rating > b.rating ? 1 : -1));\n                    break;\n                case 'data':\n                    currentProducts.sort((a, b) => (a.createdAt > b.createdAt ? 1 : -1));\n                    break;\n                case 'price':\n                    currentProducts.sort((a, b) => (a.price > b.price ? 1 : -1));\n                    break;\n                default:\n                    break;\n            }\n\n            const size = 9;\n            const subarray: Product[][] = [];\n            for (let i = 0; i < Math.ceil(currentProducts.length / size); i++) {\n                subarray[i] = currentProducts.slice(i * size, i * size + size);\n            }\n\n            return subarray;\n        }\n    );\n\n    const $totalFilteredProducts = $paginatedProducts.map((el) => el.flat(Infinity).length);\n\n    return {\n        $sortBy,\n        $paginatedProducts,\n        $totalFilteredProducts,\n    };\n});\n"
        ],
        "mappings": "AAAA,SAAS,SAAS,mBAAmB;AAErC,SAAS,YAAY;AAErB,SAAuB,oBAAoB;AAEpC,aAAM,sBAAsB,KAAK,MAAM;AAC1C,QAAM,UAAU,YAGb,CAAC,CAAmC;AAEvC,QAAM,qBAAqB;AAAA,IACvB;AAAA,MACI,UAAU,aAAa;AAAA,MACvB,MAAM;AAAA,MACN,YAAY,aAAa;AAAA,MACzB,WAAW,aAAa;AAAA,MACxB,YAAY,aAAa;AAAA,IAC7B;AAAA,IACA,CAAC,EAAE,UAAU,MAAM,YAAY,WAAW,WAAW,MAAM;AACvD,YAAM,kBAAkB,CAAC,GAAG,QAAQ,EAAE,OAAO,CAAC,YAAY;AACtD,cAAM,mBACF,QAAQ,gBAAgB,KAAK,CAAC,SAAS,KAAK,mBAAmB,WAAW,GAAG,SAAS;AAE1F,cAAM,mBACF,QAAQ,gBAAgB,KAAK,CAAC,SAAS,KAAK,mBAAmB,WAAW,GAAG,SAAS;AAG1F,cAAM,mBAAmB,WAAW,WAAW,KAAK,WAAW,SAAS,gBAAgB;AACxF,cAAM,kBAAkB,UAAU,WAAW,KAAK,UAAU,SAAS,gBAAgB;AACrF,cAAM,kBAAkB,WAAW,WAAW,KAAK,WAAW,SAAS,QAAQ,QAAQ;AAEvF,eAAO,oBAAoB,mBAAmB;AAAA,MAClD,CAAC;AAED,cAAQ,KAAK,MAAM;AAAA,QACf,KAAK;AACD,0BAAgB,KAAK,CAAC,GAAG,MAAO,EAAE,SAAS,EAAE,SAAS,IAAI,EAAG;AAC7D;AAAA,QACJ,KAAK;AACD,0BAAgB,KAAK,CAAC,GAAG,MAAO,EAAE,YAAY,EAAE,YAAY,IAAI,EAAG;AACnE;AAAA,QACJ,KAAK;AACD,0BAAgB,KAAK,CAAC,GAAG,MAAO,EAAE,QAAQ,EAAE,QAAQ,IAAI,EAAG;AAC3D;AAAA,QACJ;AACI;AAAA,MACR;AAEA,YAAM,OAAO;AACb,YAAM,WAAwB,CAAC;AAC/B,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,gBAAgB,SAAS,IAAI,GAAG,KAAK;AAC/D,iBAAS,CAAC,IAAI,gBAAgB,MAAM,IAAI,MAAM,IAAI,OAAO,IAAI;AAAA,MACjE;AAEA,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,QAAM,yBAAyB,mBAAmB,IAAI,CAAC,OAAO,GAAG,KAAK,QAAQ,EAAE,MAAM;AAEtF,SAAO;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACJ,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1761073703469,
      "end": 1761073703469,
      "order": "normal-normal"
    },
    {
      "name": "vite:vue",
      "start": 1761073703469,
      "end": 1761073703469,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1761073703469,
      "end": 1761073703469,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1761073703470,
      "end": 1761073703470,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1761073703470,
      "end": 1761073703470,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1761073703470,
      "end": 1761073703470,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1761073703470,
      "end": 1761073703470,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1761073703470,
      "end": 1761073703470,
      "order": "normal-normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1761073703470,
      "end": 1761073703470,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1761073703470,
      "end": 1761073703471,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1761073703471,
      "end": 1761073703471,
      "order": "normal"
    }
  ]
}
