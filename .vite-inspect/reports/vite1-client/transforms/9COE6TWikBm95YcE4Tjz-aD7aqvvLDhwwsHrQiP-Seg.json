{
  "resolvedId": "C:/Users/iyvor/OneDrive/Документы/Шарага/4_семестр/Фреймворки JS/FW-JS/src/entities/Product/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createEvent, createStore, restore, sample } from 'effector';\nimport { persist } from 'effector-storage/local';\n\nimport { atom } from '@/shared/factories';\nimport { shuffled } from '@/shared/lib';\nimport { appStarted } from '@/shared/services';\n\nimport { getAllProductsQuery } from '../api';\nimport { filterCategoryByKey, findCategories, mapCategoriesLabels } from '../lib';\nimport type { ID, Product } from '../types';\n\nexport const ProductModel = atom(() => {\n    const $categories = restore(\n        getAllProductsQuery.finished.success.map(({ result }) => mapCategoriesLabels(findCategories(result))),\n        []\n    );\n\n    // 4 случайных товара со скидкой\n    const $discountedItems = restore(\n        getAllProductsQuery.finished.success.map(({ result }) =>\n            shuffled(result.filter((el) => Boolean(el.discount_price)).filter((el) => el.is_available)).slice(0, 4)\n        ),\n        []\n    );\n\n    const productLikeSettled = createEvent<{ id: string }>();\n    const $likedProducts = createStore<string[]>([]).on(productLikeSettled, (products, newProduct) => {\n        if (products.find((id) => id === newProduct.id)) {\n            return products.filter((id) => id !== newProduct.id);\n        }\n        return [...products, newProduct.id];\n    });\n\n    const cartProductSettled = createEvent<Product>();\n    const cartProductRemoved = createEvent<Product>();\n    const cartProductDelete = createEvent<Product>();\n    const cartResettled = createEvent();\n    const $productCart = createStore<{\n        [K: ID]: {\n            count: number;\n            product: Product;\n        };\n    }>({})\n        .reset(cartResettled)\n        .on(cartProductSettled, (products, newProduct) => {\n            if (products[newProduct.id]?.count) {\n                return {\n                    ...products,\n                    [newProduct.id]: {\n                        product: newProduct,\n                        count: (products[newProduct.id].count += 1),\n                    },\n                };\n            }\n\n            return {\n                ...products,\n                [newProduct.id]: {\n                    product: newProduct,\n                    count: 1,\n                },\n            };\n        })\n        .on(cartProductRemoved, (products, newProduct) => {\n            if (products[newProduct.id]) {\n                const current = {\n                    ...products,\n                    [newProduct.id]: {\n                        product: newProduct,\n                        count: (products[newProduct.id].count -= 1),\n                    },\n                };\n\n                if (current[newProduct.id].count < 1) {\n                    delete current[newProduct.id];\n                }\n\n                return current;\n            }\n\n            return {\n                ...products,\n            };\n        })\n        .on(cartProductDelete, (products, newProduct) => {\n            const current = { ...products };\n            delete current[newProduct.id];\n            return current;\n        });\n\n    const $productCartCount = $productCart.map((cart) => Object.values(cart).reduce((acc, val) => acc + val.count, 0));\n\n    const $availableProducts = restore(\n        getAllProductsQuery.finished.success.map(({ result }) => result.filter((el) => el.is_available)),\n        []\n    );\n\n    const $newArrivalProducts = $availableProducts.map((products) =>\n        products.sort((a, b) => (new Date(a.createdAt) < new Date(b.createdAt) ? 1 : -1)).slice(0, 8)\n    );\n\n    const $bestSellerProducts = $availableProducts.map((products) =>\n        products.sort((a, b) => (a.count_review > b.count_review ? -1 : 1)).slice(0, 8)\n    );\n\n    const $featuredProducts = $availableProducts.map((products) =>\n        products.sort((a, b) => (a.rating < b.rating ? 1 : -1)).slice(0, 8)\n    );\n\n    const $allCharacteristicsNames = $availableProducts.map((products) =>\n        products\n            .map((product) => product.characteristics)\n            .flat(1)\n            .filter((obj1, i, arr) => arr.findIndex((obj2) => obj2.characteristic === obj1.characteristic) === i)\n            .map((el) => el.characteristic)\n            .filter((el) => el === 'Процессор' || el === 'Диагональ')\n    );\n\n    const $allProcessorTypes = $availableProducts.map((products) => filterCategoryByKey(products, 'Процессор'));\n    const $allDiagonalTypes = $availableProducts.map((products) => filterCategoryByKey(products, 'Диагональ'));\n\n    // Все уникальные категории товаров\n    const $allCategories = $availableProducts.map((products) => {\n        const categories = products.map((p) => p.category);\n        return [...new Set(categories)].sort();\n    });\n\n    // V-models\n    const $selectedProcessors = createStore<string[]>([]);\n    const $selectedDiagonals = createStore<string[]>([]);\n    const $selectedCategories = createStore<string[]>([]);\n\n    const $allMemoryTypes = $availableProducts.map((products) =>\n        filterCategoryByKey(products, 'Объем встроенной памяти').sort((a, b) => (Number(a) > Number(b) ? 1 : -1))\n    );\n\n    const $totalCartPrice = $productCart.map((products) => {\n        const keys = Object.keys(products);\n        return keys.reduce((acc, curr) => acc + products[Number(curr)].product.price * products[Number(curr)].count, 0);\n    });\n\n    persist({\n        pickup: appStarted,\n        store: $likedProducts,\n        key: 'liked-products',\n    });\n\n    persist({\n        pickup: appStarted,\n        store: $productCart,\n        key: 'cart-products',\n    });\n\n    // Очищаем localStorage при сбросе корзины\n    sample({\n        clock: cartResettled,\n        fn: () => {\n            localStorage.removeItem('cart-products');\n        },\n    });\n\n    sample({\n        clock: appStarted,\n        target: [getAllProductsQuery.start],\n    });\n\n    return {\n        $categories,\n        $discountedItems,\n        productLikeSettled,\n        $likedProducts,\n        $newArrivalProducts,\n        $bestSellerProducts,\n        $featuredProducts,\n        $productCart,\n        cartProductSettled,\n        cartProductRemoved,\n        $productCartCount,\n        $availableProducts,\n        $allMemoryTypes,\n        $allCharacteristicsNames,\n        $allProcessorTypes,\n        $selectedProcessors,\n        cartProductDelete,\n        $totalCartPrice,\n        cartResettled,\n        $allDiagonalTypes,\n        $selectedDiagonals,\n        $allCategories,\n        $selectedCategories,\n    };\n});\n",
      "start": 1761073702810,
      "end": 1761073702864,
      "sourcemaps": null
    },
    {
      "name": "@tailwindcss/vite:generate:build",
      "start": 1761073702864,
      "end": 1761073702864,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "result": "import { createEvent, createStore, restore, sample } from \"effector\";\nimport { persist } from \"effector-storage/local\";\nimport { atom } from \"@/shared/factories\";\nimport { shuffled } from \"@/shared/lib\";\nimport { appStarted } from \"@/shared/services\";\nimport { getAllProductsQuery } from \"../api\";\nimport { filterCategoryByKey, findCategories, mapCategoriesLabels } from \"../lib\";\nexport const ProductModel = atom(() => {\n  const $categories = restore(\n    getAllProductsQuery.finished.success.map(({ result }) => mapCategoriesLabels(findCategories(result))),\n    []\n  );\n  const $discountedItems = restore(\n    getAllProductsQuery.finished.success.map(\n      ({ result }) => shuffled(result.filter((el) => Boolean(el.discount_price)).filter((el) => el.is_available)).slice(0, 4)\n    ),\n    []\n  );\n  const productLikeSettled = createEvent();\n  const $likedProducts = createStore([]).on(productLikeSettled, (products, newProduct) => {\n    if (products.find((id) => id === newProduct.id)) {\n      return products.filter((id) => id !== newProduct.id);\n    }\n    return [...products, newProduct.id];\n  });\n  const cartProductSettled = createEvent();\n  const cartProductRemoved = createEvent();\n  const cartProductDelete = createEvent();\n  const cartResettled = createEvent();\n  const $productCart = createStore({}).reset(cartResettled).on(cartProductSettled, (products, newProduct) => {\n    if (products[newProduct.id]?.count) {\n      return {\n        ...products,\n        [newProduct.id]: {\n          product: newProduct,\n          count: products[newProduct.id].count += 1\n        }\n      };\n    }\n    return {\n      ...products,\n      [newProduct.id]: {\n        product: newProduct,\n        count: 1\n      }\n    };\n  }).on(cartProductRemoved, (products, newProduct) => {\n    if (products[newProduct.id]) {\n      const current = {\n        ...products,\n        [newProduct.id]: {\n          product: newProduct,\n          count: products[newProduct.id].count -= 1\n        }\n      };\n      if (current[newProduct.id].count < 1) {\n        delete current[newProduct.id];\n      }\n      return current;\n    }\n    return {\n      ...products\n    };\n  }).on(cartProductDelete, (products, newProduct) => {\n    const current = { ...products };\n    delete current[newProduct.id];\n    return current;\n  });\n  const $productCartCount = $productCart.map((cart) => Object.values(cart).reduce((acc, val) => acc + val.count, 0));\n  const $availableProducts = restore(\n    getAllProductsQuery.finished.success.map(({ result }) => result.filter((el) => el.is_available)),\n    []\n  );\n  const $newArrivalProducts = $availableProducts.map(\n    (products) => products.sort((a, b) => new Date(a.createdAt) < new Date(b.createdAt) ? 1 : -1).slice(0, 8)\n  );\n  const $bestSellerProducts = $availableProducts.map(\n    (products) => products.sort((a, b) => a.count_review > b.count_review ? -1 : 1).slice(0, 8)\n  );\n  const $featuredProducts = $availableProducts.map(\n    (products) => products.sort((a, b) => a.rating < b.rating ? 1 : -1).slice(0, 8)\n  );\n  const $allCharacteristicsNames = $availableProducts.map(\n    (products) => products.map((product) => product.characteristics).flat(1).filter((obj1, i, arr) => arr.findIndex((obj2) => obj2.characteristic === obj1.characteristic) === i).map((el) => el.characteristic).filter((el) => el === \"Процессор\" || el === \"Диагональ\")\n  );\n  const $allProcessorTypes = $availableProducts.map((products) => filterCategoryByKey(products, \"Процессор\"));\n  const $allDiagonalTypes = $availableProducts.map((products) => filterCategoryByKey(products, \"Диагональ\"));\n  const $allCategories = $availableProducts.map((products) => {\n    const categories = products.map((p) => p.category);\n    return [...new Set(categories)].sort();\n  });\n  const $selectedProcessors = createStore([]);\n  const $selectedDiagonals = createStore([]);\n  const $selectedCategories = createStore([]);\n  const $allMemoryTypes = $availableProducts.map(\n    (products) => filterCategoryByKey(products, \"Объем встроенной памяти\").sort((a, b) => Number(a) > Number(b) ? 1 : -1)\n  );\n  const $totalCartPrice = $productCart.map((products) => {\n    const keys = Object.keys(products);\n    return keys.reduce((acc, curr) => acc + products[Number(curr)].product.price * products[Number(curr)].count, 0);\n  });\n  persist({\n    pickup: appStarted,\n    store: $likedProducts,\n    key: \"liked-products\"\n  });\n  persist({\n    pickup: appStarted,\n    store: $productCart,\n    key: \"cart-products\"\n  });\n  sample({\n    clock: cartResettled,\n    fn: () => {\n      localStorage.removeItem(\"cart-products\");\n    }\n  });\n  sample({\n    clock: appStarted,\n    target: [getAllProductsQuery.start]\n  });\n  return {\n    $categories,\n    $discountedItems,\n    productLikeSettled,\n    $likedProducts,\n    $newArrivalProducts,\n    $bestSellerProducts,\n    $featuredProducts,\n    $productCart,\n    cartProductSettled,\n    cartProductRemoved,\n    $productCartCount,\n    $availableProducts,\n    $allMemoryTypes,\n    $allCharacteristicsNames,\n    $allProcessorTypes,\n    $selectedProcessors,\n    cartProductDelete,\n    $totalCartPrice,\n    cartResettled,\n    $allDiagonalTypes,\n    $selectedDiagonals,\n    $allCategories,\n    $selectedCategories\n  };\n});\n",
      "start": 1761073702864,
      "end": 1761073702879,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "C:/Users/iyvor/OneDrive/Документы/Шарага/4_семестр/Фреймворки JS/FW-JS/src/entities/Product/model/index.ts"
        ],
        "sourcesContent": [
          "import { createEvent, createStore, restore, sample } from 'effector';\nimport { persist } from 'effector-storage/local';\n\nimport { atom } from '@/shared/factories';\nimport { shuffled } from '@/shared/lib';\nimport { appStarted } from '@/shared/services';\n\nimport { getAllProductsQuery } from '../api';\nimport { filterCategoryByKey, findCategories, mapCategoriesLabels } from '../lib';\nimport type { ID, Product } from '../types';\n\nexport const ProductModel = atom(() => {\n    const $categories = restore(\n        getAllProductsQuery.finished.success.map(({ result }) => mapCategoriesLabels(findCategories(result))),\n        []\n    );\n\n    // 4 случайных товара со скидкой\n    const $discountedItems = restore(\n        getAllProductsQuery.finished.success.map(({ result }) =>\n            shuffled(result.filter((el) => Boolean(el.discount_price)).filter((el) => el.is_available)).slice(0, 4)\n        ),\n        []\n    );\n\n    const productLikeSettled = createEvent<{ id: string }>();\n    const $likedProducts = createStore<string[]>([]).on(productLikeSettled, (products, newProduct) => {\n        if (products.find((id) => id === newProduct.id)) {\n            return products.filter((id) => id !== newProduct.id);\n        }\n        return [...products, newProduct.id];\n    });\n\n    const cartProductSettled = createEvent<Product>();\n    const cartProductRemoved = createEvent<Product>();\n    const cartProductDelete = createEvent<Product>();\n    const cartResettled = createEvent();\n    const $productCart = createStore<{\n        [K: ID]: {\n            count: number;\n            product: Product;\n        };\n    }>({})\n        .reset(cartResettled)\n        .on(cartProductSettled, (products, newProduct) => {\n            if (products[newProduct.id]?.count) {\n                return {\n                    ...products,\n                    [newProduct.id]: {\n                        product: newProduct,\n                        count: (products[newProduct.id].count += 1),\n                    },\n                };\n            }\n\n            return {\n                ...products,\n                [newProduct.id]: {\n                    product: newProduct,\n                    count: 1,\n                },\n            };\n        })\n        .on(cartProductRemoved, (products, newProduct) => {\n            if (products[newProduct.id]) {\n                const current = {\n                    ...products,\n                    [newProduct.id]: {\n                        product: newProduct,\n                        count: (products[newProduct.id].count -= 1),\n                    },\n                };\n\n                if (current[newProduct.id].count < 1) {\n                    delete current[newProduct.id];\n                }\n\n                return current;\n            }\n\n            return {\n                ...products,\n            };\n        })\n        .on(cartProductDelete, (products, newProduct) => {\n            const current = { ...products };\n            delete current[newProduct.id];\n            return current;\n        });\n\n    const $productCartCount = $productCart.map((cart) => Object.values(cart).reduce((acc, val) => acc + val.count, 0));\n\n    const $availableProducts = restore(\n        getAllProductsQuery.finished.success.map(({ result }) => result.filter((el) => el.is_available)),\n        []\n    );\n\n    const $newArrivalProducts = $availableProducts.map((products) =>\n        products.sort((a, b) => (new Date(a.createdAt) < new Date(b.createdAt) ? 1 : -1)).slice(0, 8)\n    );\n\n    const $bestSellerProducts = $availableProducts.map((products) =>\n        products.sort((a, b) => (a.count_review > b.count_review ? -1 : 1)).slice(0, 8)\n    );\n\n    const $featuredProducts = $availableProducts.map((products) =>\n        products.sort((a, b) => (a.rating < b.rating ? 1 : -1)).slice(0, 8)\n    );\n\n    const $allCharacteristicsNames = $availableProducts.map((products) =>\n        products\n            .map((product) => product.characteristics)\n            .flat(1)\n            .filter((obj1, i, arr) => arr.findIndex((obj2) => obj2.characteristic === obj1.characteristic) === i)\n            .map((el) => el.characteristic)\n            .filter((el) => el === 'Процессор' || el === 'Диагональ')\n    );\n\n    const $allProcessorTypes = $availableProducts.map((products) => filterCategoryByKey(products, 'Процессор'));\n    const $allDiagonalTypes = $availableProducts.map((products) => filterCategoryByKey(products, 'Диагональ'));\n\n    // Все уникальные категории товаров\n    const $allCategories = $availableProducts.map((products) => {\n        const categories = products.map((p) => p.category);\n        return [...new Set(categories)].sort();\n    });\n\n    // V-models\n    const $selectedProcessors = createStore<string[]>([]);\n    const $selectedDiagonals = createStore<string[]>([]);\n    const $selectedCategories = createStore<string[]>([]);\n\n    const $allMemoryTypes = $availableProducts.map((products) =>\n        filterCategoryByKey(products, 'Объем встроенной памяти').sort((a, b) => (Number(a) > Number(b) ? 1 : -1))\n    );\n\n    const $totalCartPrice = $productCart.map((products) => {\n        const keys = Object.keys(products);\n        return keys.reduce((acc, curr) => acc + products[Number(curr)].product.price * products[Number(curr)].count, 0);\n    });\n\n    persist({\n        pickup: appStarted,\n        store: $likedProducts,\n        key: 'liked-products',\n    });\n\n    persist({\n        pickup: appStarted,\n        store: $productCart,\n        key: 'cart-products',\n    });\n\n    // Очищаем localStorage при сбросе корзины\n    sample({\n        clock: cartResettled,\n        fn: () => {\n            localStorage.removeItem('cart-products');\n        },\n    });\n\n    sample({\n        clock: appStarted,\n        target: [getAllProductsQuery.start],\n    });\n\n    return {\n        $categories,\n        $discountedItems,\n        productLikeSettled,\n        $likedProducts,\n        $newArrivalProducts,\n        $bestSellerProducts,\n        $featuredProducts,\n        $productCart,\n        cartProductSettled,\n        cartProductRemoved,\n        $productCartCount,\n        $availableProducts,\n        $allMemoryTypes,\n        $allCharacteristicsNames,\n        $allProcessorTypes,\n        $selectedProcessors,\n        cartProductDelete,\n        $totalCartPrice,\n        cartResettled,\n        $allDiagonalTypes,\n        $selectedDiagonals,\n        $allCategories,\n        $selectedCategories,\n    };\n});\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1761073702879,
      "end": 1761073702879,
      "order": "normal-normal"
    },
    {
      "name": "vite:vue",
      "start": 1761073702879,
      "end": 1761073702879,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1761073702879,
      "end": 1761073702879,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1761073702879,
      "end": 1761073702879,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1761073702879,
      "end": 1761073702879,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1761073702879,
      "end": 1761073702879,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1761073702879,
      "end": 1761073702879,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1761073702879,
      "end": 1761073702879,
      "order": "normal-normal"
    },
    {
      "name": "unplugin-vue-components",
      "start": 1761073702880,
      "end": 1761073702880,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1761073702880,
      "end": 1761073702880,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1761073702880,
      "end": 1761073702880,
      "order": "normal"
    }
  ]
}
